datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL)#, salinity, temperature_C, pH, DO_mgL, water_depth_m)%>%
DIC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL)#, salinity, temperature_C, pH, DO_mgL, water_depth_m)%>%
#get DOC
DOC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DOC_bottle_data$date, DOC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DOC_bottle_data <- DOC_bottle_data%>%
select(DateTime_UTC, DOC_umolperL)%>%
rename(datetime = DateTime_UTC, DOC = DOC_umolperL) #%>%
DIC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL) %>%
rename(datetime = DateTime_UTC, DIC = DIC_umolL, TA = TA_umolL)#, salinity, temperature_C, pH, DO_mgL, water_depth_m)%>%
DIC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL) %>%
rename(datetime = datetime, DIC = DIC_umolL, TA = TA_umolL)#, salinity, temperature_C, pH, DO_mgL, water_depth_m)%>%
#get DOC
DOC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DOC_bottle_data$date, DOC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DOC_bottle_data <- DOC_bottle_data%>%
select(datetime, TA_umolL, DOC_umolL)%>%
rename(datetime = datetime, DOC = DOC_umolL) #%>%
DIC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL) %>%
rename(datetime = datetime, DIC = DIC_umolL, TA = TA_umolL)
DIC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL) %>%
rename(datetime = datetime, DIC = DIC_umolL, TA = TA_umolL)#, salinity, temperature_C, pH, DO_mgL, water_depth_m)%>%
#get DOC
DOC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DOC_bottle_data$date, DOC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DOC_bottle_data$datetime <- mdy_hm(datetime_str)
DOC_bottle_data <- DOC_bottle_data%>%
select(datetime, TA_umolL, DOC_umolL)%>%
rename(datetime = datetime, DOC = DOC_umolL) #%>%
#mutate(datetime=mdy_hm(datetime))%>%
#mutate(datetime=with_tz(datetime, "EST"))%>%
#filter(datetime < as.POSIXct("2017-01-01 00:00"))
#write.csv(DIC_bottle_data, "../../Data/Derivative/SLP_USGS_WHOI/DIC_bottle_data.csv")
View(DOC_bottle_data)
DIC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL) %>%
rename(datetime = datetime, DIC = DIC_umolL, TA = TA_umolL)#, salinity, temperature_C, pH, DO_mgL, water_depth_m)%>%
#get DOC
DOC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DOC_bottle_data$date, DOC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DOC_bottle_data$datetime <- mdy_hm(datetime_str)
DOC_bottle_data <- DOC_bottle_data%>%
select(datetime, DOC_umolL)%>%
rename(datetime = datetime, DOC = DOC_umolL) #%>%
#mutate(datetime=mdy_hm(datetime))%>%
#mutate(datetime=with_tz(datetime, "EST"))%>%
#filter(datetime < as.POSIXct("2017-01-01 00:00"))
#write.csv(DIC_bottle_data, "../../Data/Derivative/SLP_USGS_WHOI/DIC_bottle_data.csv")
#To match bottle and sensor data, round to 5 mins
DIC_bottle_data$datetime<-round_date(DIC_bottle_data$datetime, "5 minutes")
DOC_bottle_data$datetime<-round_date(DOC_bottle_data$datetime, "5 minutes")
View(DIC_bottle_data)
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
View(sensor_IC_subset)
# Load necessary packages
# 1. Setup ---------
## Load packages
require(pacman)
p_load(tidyverse, lubridate,  janitor, parsedate,  data.table, readxl,
cowplot,ggpubr, plotrix)
## Set a common timezone, so even if your computer switches timezones, everything is static
common_tz = "Etc/GMT+5"
setwd("raw-sontek-data/")
path <- "raw-sontek-data/"
#list all the files in the directory
#create a list of the files there
sontek_files <- dir(pattern = "dat$", full.names = FALSE)
# 3. Function ---------
## baby function
get_colnames <- function(path){
read_delim(path[[1]], skip = 1) %>%
slice(3:n()) %>% ## remove dead header rows
clean_names() %>%
colnames()
}
get_colnames(sontek_files)
## Function to read in sontek You can rinse and repeat w other instruments, just change cols
read_sontek <- function(path){
cols = c("water_depth", "flowrate", "cross_area", "mean_velocity", "total_volume"  ) ## CHANGE ME
read_delim(path, skip = 1) %>%
slice(3:n()) %>% ## remove dead header rows
#slice(1:100) %>%  ## use this if something breaks, it'll make reading in MUCH faster
clean_names() %>% ## from janitor pkg, make column names nice
mutate(datetime_raw = force_tz(parsedate::parse_date(timestamp), tzone = common_tz)) %>%
mutate(timestamp = parse_date(timestamp)) } #%>%
#mutate(datetime_15min = round_date(datetime_raw, "15 min")) %>%  ## Use me if you want 7:10 and 7:20 = 7:15
#mutate(datetime_15min = floor_date(datetime_raw, "15 min")) %>% ## Use me if you want 7:10 = 7:15 and 7:16 = 7:30
#select(datetime_15min, all_of(cols)) %>%
#mutate(across(where(is.character), as.numeric)) %>%
#group_by(datetime_15min) %>%
#summarize(across(where(is.numeric), mean, na.rm = T))
#}
## Create a dataframe
sontek <- sontek_files %>%
map(read_sontek) %>%
bind_rows()
## Check plot
sontek_chkplot_all <- ggplot(sontek, aes(timestamp, as.numeric(water_depth))) +
geom_point() + theme_classic() + labs(x="Time Stamp", y="Water Depth (m)")
sontek_chkplot_all
sontek_chkplot <- ggplot(sontek, aes(timestamp, as.numeric(water_depth))) +
geom_point() + theme_classic() + labs(x="Time Stamp", y="Water Depth (m)") + ylim(-0.5,5)
sontek_chkplot
head(sontek)
sontek_lite <- sontek %>%
select(c(timestamp, water_depth, flowrate))
sontek_lite$flag <-  ifelse(sontek_lite$water_depth >= 2, 'OOR', 'NA')
head(sontek_lite)
write.csv(sontek_lite, "derived-data/sontek.csv")
setwd("raw-exo-data/")
path <- "raw-exo-data/"
#list all the files in the directory
#create a list of the files there
#exo_files <- dir(pattern = "csv$", full.names = FALSE)
## Create a dataframe
exo <- read.csv("2024_figshare_data_USA-MDA_water-quality_SERC-GCREW.csv")
## Check plot
exo_chkplot_all <- ggplot(exo, aes(as.POSIXct(timestamp_utc), as.numeric(salinity_ppt))) +
geom_point() + theme_classic() + labs(x="Time Stamp", y="Salinity (ppt)")
exo_chkplot_all
#need to clean up the timestamp so that we can join them
exo <- exo %>%
mutate(timestamp = force_tz(parsedate::parse_date(timestamp_utc), tzone = common_tz))
View(exo)
exo$datetime<-round_date(exo$timestamp, "5 minutes")
View(sontek)
sontek$datetime<-round_date(sontek$timestamp, "5 minutes")
#pull all the data together
dat <- full_join(
exo %>% distinct(datetime, .keep_all = TRUE),
sontek %>% distinct(datetime, .keep_all = TRUE),
by = "datetime"
)
head(dat)
View(dat)
#pull all the data together
dat <- full_join(
exo %>% distinct(datetime, .keep_all = TRUE),
sontek ,
by = "datetime"
)
head(dat)
#pull all the data together
dat <- full_join(
exo ,
sontek %>% distinct(datetime, .keep_all = TRUE) ,
by = "datetime"
)
exo$datetime<-round_date(exo$timestamp, "5 minutes")
sontek$datetime<-round_date(sontek$timestamp, "5 minutes")
#pull all the data together
dat <- full_join(
exo %>% distinct(datetime, .keep_all = TRUE),
sontek %>% distinct(datetime, .keep_all = TRUE),
by = "datetime"
)
head(dat)
write.csv(dat, "combined-raw-data/sensor-data.csv")
knitr::opts_chunk$set(echo = TRUE)
options(knitr.duplicate.label = "allow")
rm(list=ls())
library(tidyverse)
library(lubridate)
library(zoo)
library(fuzzyjoin)
sensor_data <- read.csv("combined-raw-data/sensor-data.csv")
sensor_data <- sensor_data %>% mutate_all(~ifelse(is.nan(.), NA, .))
sensor_data <- sensor_data%>%
#mutate(Collection_Date=mdy(Collection_Date))%>%
#mutate(Collection_Time_UTC=hm(Collection_Time_UTC))%>%
#mutate(datetime_UTC=Collection_Date+Collection_Time_UTC)%>%
#mutate(datetime_UTC=na.approx(datetime_UTC))%>% #there are some gaps in sensor datetime
mutate(datetime=with_tz(datetime, "EST"))
sensor_data <- sensor_data%>%
select(datetime, odo_mg_l, fdom_qsu,  salinity_ppt , ph, #ORP_mV, (don't have)
water_depth , water_temperature_c , flowrate )%>%
#mutate(DO_mgL=DO_mgL/32*1000)%>% #unit conversion
rename(DO = odo_mg_l, fDOM = fdom_qsu,  flow = flowrate, #ORP = ORP_mV,
S = salinity_ppt, H = water_depth, T = water_temperature_c, pH = ph)
write.csv(sensor_data, "derived-data/sensor_data.csv")
DIC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL) %>%
rename(datetime = datetime, DIC = DIC_umolL, TA = TA_umolL)#, salinity, temperature_C, pH, DO_mgL, water_depth_m)%>%
#get DOC
DOC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DOC_bottle_data$date, DOC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DOC_bottle_data$datetime <- mdy_hm(datetime_str)
DOC_bottle_data <- DOC_bottle_data%>%
select(datetime, DOC_umolL)%>%
rename(datetime = datetime, DOC = DOC_umolL) #%>%
#mutate(datetime=mdy_hm(datetime))%>%
#mutate(datetime=with_tz(datetime, "EST"))%>%
#filter(datetime < as.POSIXct("2017-01-01 00:00"))
#write.csv(DIC_bottle_data, "../../Data/Derivative/SLP_USGS_WHOI/DIC_bottle_data.csv")
#To match bottle and sensor data, round to 5 mins
DIC_bottle_data$datetime<-round_date(DIC_bottle_data$datetime, "5 minutes")
DOC_bottle_data$datetime<-round_date(DOC_bottle_data$datetime, "5 minutes")
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
View(sensor_IC_subset)
View(sensor_OC_subset)
View(DIC_bottle_data)
View(DOC_bottle_data)
View(sensor_data)
sensor_data <- read.csv("combined-raw-data/sensor-data.csv")
View(sensor_data)
sensor_data <- sensor_data%>%
select(datetime, odo_mg_l, fdom_qsu,  salinity_ppt , ph, #ORP_mV, (don't have)
water_depth , water_temperature_c , flowrate )%>%
#mutate(DO_mgL=DO_mgL/32*1000)%>% #unit conversion
rename(DO = odo_mg_l, fDOM = fdom_qsu,  flow = flowrate, #ORP = ORP_mV,
S = salinity_ppt, H = water_depth, T = water_temperature_c, pH = ph)
View(sensor_data)
sensor_data <- read.csv("combined-raw-data/sensor-data.csv")
sensor_data <- sensor_data %>% mutate_all(~ifelse(is.nan(.), NA, .))
#sensor_data <- sensor_data%>%
#mutate(Collection_Date=mdy(Collection_Date))%>%
#mutate(Collection_Time_UTC=hm(Collection_Time_UTC))%>%
#mutate(datetime_UTC=Collection_Date+Collection_Time_UTC)%>%
#mutate(datetime_UTC=na.approx(datetime_UTC))%>% #there are some gaps in sensor datetime
#mutate(datetime=with_tz(datetime, "EST"))
sensor_data <- sensor_data%>%
select(datetime, odo_mg_l, fdom_qsu,  salinity_ppt , ph, #ORP_mV, (don't have)
water_depth , water_temperature_c , flowrate )%>%
#mutate(DO_mgL=DO_mgL/32*1000)%>% #unit conversion
rename(DO = odo_mg_l, fDOM = fdom_qsu,  flow = flowrate, #ORP = ORP_mV,
S = salinity_ppt, H = water_depth, T = water_temperature_c, pH = ph)
write.csv(sensor_data, "derived-data/sensor_data.csv")
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
View(sensor_IC_subset)
DIC_bottle_data <- left_join(DIC_bottle_data, sensor_IC_subset, by="datetime")
#To match bottle and sensor data, round to 5 mins
DIC_bottle_data$datetime<-round_date(DIC_bottle_data$datetime, "5 minutes")
DOC_bottle_data$datetime<-round_date(DOC_bottle_data$datetime, "5 minutes")
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
DIC_bottle_data <- left_join(DIC_bottle_data, sensor_IC_subset, by="datetime")
class(sensor_IC_subset$datetime)
class(DIC_bottle_data$datetime)
#To match bottle and sensor data, round to 5 mins
DIC_bottle_data$datetime<- as.POSIXct(round_date(DIC_bottle_data$datetime, "5 minutes"))
DOC_bottle_data$datetime<- as.POSIXct(round_date(DOC_bottle_data$datetime, "5 minutes"))
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
DIC_bottle_data <- left_join(DIC_bottle_data, sensor_IC_subset, by="datetime")
#To match bottle and sensor data, round to 5 mins
DIC_bottle_data$datetime<- round_date(DIC_bottle_data$datetime, "5 minutes")
DOC_bottle_data$datetime<- round_date(DOC_bottle_data$datetime, "5 minutes")
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
sensor_IC_subset$datetime <- as.POSIXct(sensor_IC_subset$datetime)
sensor_OC_subset$datetime <- as.POSIXct(sensor_OC_subset$datetime)
DIC_bottle_data <- left_join(DIC_bottle_data, sensor_IC_subset, by="datetime")
DOC_bottle_data <- left_join(DOC_bottle_data, sensor_OC_subset, by="datetime")
#low salinity samples are not ideal for MLR at Sage Lot Pond so not doing for GCReW
#DIC_bottle_data<-filter(DIC_bottle_data, S>19)
#DOC_bottle_data<-filter(DOC_bottle_data, S>19)
#write.csv(DIC_bottle_data, "../../Data/Derivative/SLP_USGS_WHOI/DIC_bottle_data.csv")
#write.csv(DOC_bottle_data, "../../Data/Derivative/SLP_USGS_WHOI/DOC_bottle_data.csv")
View(DIC_bottle_data)
View(sensor_IC_subset)
#To match bottle and sensor data, round to 5 mins
DIC_bottle_data$datetime<- round_date(DIC_bottle_data$datetime, "5 minutes")
DOC_bottle_data$datetime<- round_date(DOC_bottle_data$datetime, "5 minutes")
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
View(sensor_IC_subset)
View(DIC_bottle_data)
View(sensor_data)
#To match bottle and sensor data, round to 5 mins
DIC_bottle_data$datetime<- round_date(DIC_bottle_data$datetime, "5 minutes")
DOC_bottle_data$datetime<- round_date(DOC_bottle_data$datetime, "5 minutes")
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
DIC_bottle_data$datetime <- as.character(DIC_bottle_data$datetime)
DOC_bottle_data$datetime <- as.character(DOC_bottle_data$datetime)
#sensor_IC_subset$datetime <- as.POSIXct(sensor_IC_subset$datetime)
#sensor_OC_subset$datetime <- as.POSIXct(sensor_OC_subset$datetime)
DIC_bottle_data <- left_join(DIC_bottle_data, sensor_IC_subset, by="datetime")
DOC_bottle_data <- left_join(DOC_bottle_data, sensor_OC_subset, by="datetime")
#low salinity samples are not ideal for MLR at Sage Lot Pond so not doing for GCReW
#DIC_bottle_data<-filter(DIC_bottle_data, S>19)
#DOC_bottle_data<-filter(DOC_bottle_data, S>19)
#write.csv(DIC_bottle_data, "../../Data/Derivative/SLP_USGS_WHOI/DIC_bottle_data.csv")
#write.csv(DOC_bottle_data, "../../Data/Derivative/SLP_USGS_WHOI/DOC_bottle_data.csv")
View(DIC_bottle_data)
DIC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL) %>%
rename(datetime = datetime, DIC = DIC_umolL, TA = TA_umolL)#, salinity, temperature_C, pH, DO_mgL, water_depth_m)%>%
#get DOC
DOC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DOC_bottle_data$date, DOC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DOC_bottle_data$datetime <- mdy_hm(datetime_str)
DOC_bottle_data <- DOC_bottle_data%>%
select(datetime, DOC_umolL)%>%
rename(datetime = datetime, DOC = DOC_umolL) #%>%
#mutate(datetime=mdy_hm(datetime))%>%
#mutate(datetime=with_tz(datetime, "EST"))%>%
#filter(datetime < as.POSIXct("2017-01-01 00:00"))
#write.csv(DIC_bottle_data, "../../Data/Derivative/SLP_USGS_WHOI/DIC_bottle_data.csv")
View(DIC_bottle_data)
View(DOC_bottle_data)
#To match bottle and sensor data, round to 5 mins
DIC_bottle_data$datetime<- round_date(DIC_bottle_data$datetime, "5 minutes")
DOC_bottle_data$datetime<- round_date(DOC_bottle_data$datetime, "5 minutes")
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
View(sensor_IC_subset)
DIC_bottle_data <- left_join(DIC_bottle_data, sensor_IC_subset, by="datetime")
DIC_bottle_data$datetime <- as.character(DIC_bottle_data$datetime)
DOC_bottle_data$datetime <- as.character(DOC_bottle_data$datetime)
DIC_bottle_data <- left_join(DIC_bottle_data, sensor_IC_subset, by="datetime")
DOC_bottle_data <- left_join(DOC_bottle_data, sensor_OC_subset, by="datetime")
DIC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DIC_bottle_data$date, DIC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DIC_bottle_data$datetime <- mdy_hm(datetime_str)
DIC_bottle_data <- DIC_bottle_data %>%
#filter(method=='TS')%>% #remove groundwater samples
select(datetime, TA_umolL, DIC_umolL) %>%
rename(datetime = datetime, DIC = DIC_umolL, TA = TA_umolL)#, salinity, temperature_C, pH, DO_mgL, water_depth_m)%>%
#get DOC
DOC_bottle_data <- read.csv("combined-raw-data/chem-sample-data.csv")
#need to make a time stamp from the date and time sampled
datetime_str <- paste(DOC_bottle_data$date, DOC_bottle_data$time_sampled_est)
# Parse with mdy_hm for month/day/year format and hours:minutes
DOC_bottle_data$datetime <- mdy_hm(datetime_str)
DOC_bottle_data <- DOC_bottle_data%>%
select(datetime, DOC_umolL)%>%
rename(datetime = datetime, DOC = DOC_umolL) #%>%
#mutate(datetime=mdy_hm(datetime))%>%
#mutate(datetime=with_tz(datetime, "EST"))%>%
#filter(datetime < as.POSIXct("2017-01-01 00:00"))
#write.csv(DIC_bottle_data, "../../Data/Derivative/SLP_USGS_WHOI/DIC_bottle_data.csv")
#To match bottle and sensor data, round to 5 mins
DIC_bottle_data$datetime<- round_date(DIC_bottle_data$datetime, "5 minutes")
DOC_bottle_data$datetime<- round_date(DOC_bottle_data$datetime, "5 minutes")
#extract sensor data at discrete time
sensor_IC_subset<-subset(sensor_data,datetime %in% DIC_bottle_data$datetime)
sensor_OC_subset<-subset(sensor_data,datetime %in% DOC_bottle_data$datetime)
DIC_bottle_data$datetime <- as.character(DIC_bottle_data$datetime)
DOC_bottle_data$datetime <- as.character(DOC_bottle_data$datetime)
#sensor_IC_subset$datetime <- as.POSIXct(sensor_IC_subset$datetime)
#sensor_OC_subset$datetime <- as.POSIXct(sensor_OC_subset$datetime)
DIC_bottle_data <- left_join(DIC_bottle_data, sensor_IC_subset, by="datetime")
DOC_bottle_data <- left_join(DOC_bottle_data, sensor_OC_subset, by="datetime")
#low salinity samples are not ideal for MLR at Sage Lot Pond so not doing for GCReW
#DIC_bottle_data<-filter(DIC_bottle_data, S>19)
#DOC_bottle_data<-filter(DOC_bottle_data, S>19)
write.csv(DIC_bottle_data, "derived-data/DIC_bottle_data.csv")
write.csv(DOC_bottle_data, "derived-data/DOC_bottle_data.csv")
knitr::opts_chunk$set(echo = TRUE)
options(knitr.duplicate.label = "allow")
library(tidyverse)
library(lubridate)
library(ModelMetrics)
library(rmarkdown)
rm(list=ls())
DIC_bottle_data <- read.csv("derived-data/DIC_bottle_data.csv")
DOC_bottle_data <- read.csv("derived-data/DOC_bottle_data.csv")
sensor_data <- read.csv("derived-data/sensor_data.csv")
if("DIC" %in% colnames(sensor_data))
{sensor_data=select(sensor_data, -DIC, -DOC)}
DIC_model <- lm(log10(DIC) ~ log10(pH) + log10(T) + log10(S) + log10(DO),
data = DIC_bottle_data, na.action=na.omit)
summary(DIC_model)
print('DIC model RMSE')
rmse(10^DIC_model$fitted.values, DIC_bottle_data$DIC)
#version a
DOC_bottle_data_fDOM <- filter(DOC_bottle_data, fDOM > 0)
DOC_modela <- lm(log10(DOC) ~ log10(pH) + log10(T) + log(fDOM),
data = DOC_bottle_data_fDOM)
summary(DOC_modela)
print('DOC modela RMSE')
rmse(10^DOC_modela$fitted.values, DOC_bottle_data_fDOM$DOC)
#version b
DOC_modelb <- lm(log10(DOC) ~ log10(pH) + log10(T),
data = DOC_bottle_data, na.action=na.omit)
summary(DOC_modelb)
print('DOC modelb RMSE')
rmse(10^DOC_modelb$fitted.values, DOC_bottle_data$DOC)
DIC_ts <- 10^predict(DIC_model, sensor_data)
DOC_ts_a <- 10^predict(DOC_modela, sensor_data) #with fDOM
DOC_ts_b <- 10^predict(DOC_modelb, sensor_data)
#fDOM should be within 0.9 to 80 QSU
DOC_ts <- ifelse(is.na(DOC_ts_a), DOC_ts_b, DOC_ts_a)
sensor_data <- tibble(sensor_data, DIC = DIC_ts, DOC = DOC_ts)
knitr::opts_chunk$set(echo = TRUE)
options(knitr.duplicate.label = "allow")
library(tidyverse)
library(lubridate)
library(ModelMetrics)
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
options(knitr.duplicate.label = "allow")
rm(list=ls())
library(tidyverse)
library(lubridate)
library(zoo)
library(fuzzyjoin)
sensor_data <- read.csv("combined-raw-data/sensor-data.csv")
sensor_data <- sensor_data %>% mutate_all(~ifelse(is.nan(.), NA, .))
#sensor_data <- sensor_data%>%
#mutate(Collection_Date=mdy(Collection_Date))%>%
#mutate(Collection_Time_UTC=hm(Collection_Time_UTC))%>%
#mutate(datetime_UTC=Collection_Date+Collection_Time_UTC)%>%
#mutate(datetime_UTC=na.approx(datetime_UTC))%>% #there are some gaps in sensor datetime
#mutate(datetime=with_tz(datetime, "EST"))
sensor_data <- sensor_data%>%
select(datetime, odo_mg_l, fdom_qsu,  salinity_ppt , ph, #ORP_mV, (don't have)
View(sensor_data)
water_depth , water_temperature_c , flowrate )%>%
View(sensor_data)
sensor_data <- read.csv("combined-raw-data/sensor-data.csv")
sensor_data <- sensor_data %>% mutate_all(~ifelse(is.nan(.), NA, .))
#sensor_data <- sensor_data%>%
#mutate(Collection_Date=mdy(Collection_Date))%>%
#mutate(Collection_Time_UTC=hm(Collection_Time_UTC))%>%
#mutate(datetime_UTC=Collection_Date+Collection_Time_UTC)%>%
#mutate(datetime_UTC=na.approx(datetime_UTC))%>% #there are some gaps in sensor datetime
#mutate(datetime=with_tz(datetime, "EST"))
sensor_data <- sensor_data%>%
select(datetime, odo_mg_l, fdom_qsu,  salinity_ppt , ph, #ORP_mV, (don't have)
water_depth, water_temperature_c, flowrate )%>%
#mutate(DO_mgL=DO_mgL/32*1000)%>% #unit conversion
rename(DO = odo_mg_l, fDOM = fdom_qsu,  flow = flowrate, #ORP = ORP_mV,
S = salinity_ppt, H = water_depth, T = water_temperature_c, pH = ph)
write.csv(sensor_data, "derived-data/sensor_data.csv")
